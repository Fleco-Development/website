---
interface Props {
	content: string;
	lang?: string;
}

const { content, lang } = Astro.props;

import { Prism } from "@astrojs/prism";
import "../assets/prism.css";
---

<div
	class="flex overflow-clip my-3 text-sm max-w-fit text-left items-center bg-gray-800 text-white rounded-lg p-4 shadow-lg"
>
	<span class="flex overflow-x-auto gap-4 text-center items-center">
		<span class="shrink-0 text-gray-500 font-bold">$</span>

		<div
			class="overflow-x-none whitespace-nowrap flex-1 font-mono code_content"
		>
			<Prism
				class="!p-0 code_content relative !border-none !bg-gray-800"
				lang={lang}
				code={content}
			/>
		</div>
	</span>

	<button
		class="sm:daisy_tooltip sm:daisy_tooltip-left cursor-pointer bg-transparent flex-shrink-0 code_copy_button"
		role="button"
		data-tip="Copy to Clipboard"
		aria-label="Copy to Clipboard"
	>
		<svg
			width="20"
			height="20"
			class="transition text-gray-500 hover:text-white"
			xmlns="http://www.w3.org/2000/svg"
			viewBox="0 0 20 20"
			fill="currentColor"
			aria-hidden="true"
		>
			<path d="M8 2a1 1 0 000 2h2a1 1 0 100-2H8z"></path>
			<path
				d="M3 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v6h-4.586l1.293-1.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L10.414 13H15v3a2 2 0 01-2 2H5a2 2 0 01-2-2V5zM15 11h2a1 1 0 110 2h-2v-2z"
			>
			</path>
		</svg>
	</button>
</div>

<script>
	let isCopied = false;

	function handleLeave(e: Event | MouseEvent) {
		if (isCopied) {
			const button: HTMLButtonElement | null = (
				e.target as HTMLElement
			).closest("button");

			button?.classList.remove("md:daisy_tooltip-success");
			button?.setAttribute("data-tip", "Copy to Clipboard");
			isCopied = false;
		}
	}

	function handleClick(e: Event | MouseEvent) {
		const contentElement = (e.target as HTMLElement)
			.closest("div")!
			.querySelector(".code_content");

		navigator.clipboard.writeText(contentElement!.textContent as string);

		const button: HTMLButtonElement | null = (
			e.target as HTMLElement
		).closest("button");
		button?.classList.add("md:daisy_tooltip-success");
		button?.setAttribute("data-tip", "Copied to Clipboard!");

		isCopied = true;
	}

	function handleTouch(e: Event) {
		const evt = e as TouchEvent;
		e.preventDefault();

		const contentElement = (evt.touches[0].target as HTMLElement)
			.closest("div")!
			.querySelector(".code_content");

		navigator.clipboard.writeText(contentElement!.textContent as string);

		const button: HTMLButtonElement | null = (
			evt.touches[0].target as HTMLElement
		).closest("button");
		button?.setAttribute("data-tip", "Copied to Clipboard!");
		button?.classList.add(
			"daisy_tooltip",
			"daisy_tooltip-left",
			"daisy_tooltip-success",
			"daisy_tooltip-open",
		);

		setTimeout(() => {
			button?.classList.remove(
				"daisy_tooltip",
				"daisy_tooltip-left",
				"daisy_tooltip-success",
				"daisy_tooltip-open",
			);
		}, 2_000);
	}

	const buttons = document.querySelectorAll("button.code_copy_button");

	buttons.forEach((btn) => {
		btn.addEventListener("click", handleClick);
		btn.addEventListener("mouseleave", handleLeave);
		btn.addEventListener("touchstart", handleTouch);
	});
</script>
