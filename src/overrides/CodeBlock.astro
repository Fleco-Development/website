---
interface Props {
	lang: string;
	code: string;
}

const { lang, code } = Astro.props;

import { Prism } from '@astrojs/prism';
import '../assets/prism.css';
---

<div class="tw-relative">
	<Prism
		class="code_content tw-relative !tw-border-none !tw-bg-gray-800 tw-shadow-lg"
		lang={lang}
		code={code}
	/>
	<button
		class="codeblock_copy_button tw-daisy-tooltip tw-daisy-tooltip-left tw-absolute tw-right-0 tw-top-0 !tw-m-0 tw-flex-shrink-0 tw-cursor-pointer tw-bg-transparent tw-p-4"
		role="button"
		data-tip="Copy to Clipboard"
		aria-label="Copy to Clipboard"
	>
		<svg
			width="20"
			height="20"
			class="tw-text-gray-500 tw-transition hover:tw-text-white"
			xmlns="http://www.w3.org/2000/svg"
			viewBox="0 0 20 20"
			fill="currentColor"
			aria-hidden="true"
		>
			<path d="M8 2a1 1 0 000 2h2a1 1 0 100-2H8z"></path>
			<path
				d="M3 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v6h-4.586l1.293-1.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L10.414 13H15v3a2 2 0 01-2 2H5a2 2 0 01-2-2V5zM15 11h2a1 1 0 110 2h-2v-2z"
			></path>
		</svg>
	</button>
</div>

<script>
	let isCopied = false;

	function handleLeave(e: Event | MouseEvent) {
		if (isCopied) {
			const button: HTMLButtonElement | null = (e.target as HTMLElement).closest('button');

			button?.classList.remove('tw-daisy-tooltip-success');
			button?.setAttribute('data-tip', 'Copy to Clipboard');
			isCopied = false;
		}
	}

	function handleClick(e: Event | MouseEvent) {
		const contentElement = (e.target as HTMLElement)
			.closest('div')!
			.querySelector('pre.code_content code');

		navigator.clipboard.writeText(contentElement!.textContent as string);

		const button = (e.target as HTMLElement).closest('button');
		button?.classList.add('tw-daisy-tooltip-success');
		button?.setAttribute('data-tip', 'Copied to Clipboard!');

		isCopied = true;
	}

	function handleTouch(e: Event) {
		const evt = e as TouchEvent;
		e.preventDefault();

		const contentElement = (evt.touches[0].target as HTMLElement)
			.closest('div')!
			.querySelector('pre.code_content code');

		navigator.clipboard.writeText(contentElement!.textContent as string);

		const button: HTMLButtonElement | null = (evt.touches[0].target as HTMLElement).closest(
			'button'
		);
		button?.setAttribute('data-tip', 'Copied to Clipboard!');
		button?.classList.add(
			'tw-daisy-tooltip',
			'tw-daisy-tooltip-left',
			'tw-daisy-tooltip-success',
			'tw-daisy-tooltip-open'
		);

		setTimeout(() => {
			button?.classList.remove(
				'tw-daisy-tooltip',
				'tw-daisy-tooltip-left',
				'tw-daisy-tooltip-success',
				'tw-daisy-tooltip-open'
			);
		}, 2_000);
	}

	const buttons = document.querySelectorAll('button.codeblock_copy_button');

	buttons.forEach((btn) => {
		btn.addEventListener('click', handleClick);
		btn.addEventListener('mouseleave', handleLeave);
		btn.addEventListener('touchstart', handleTouch);
	});
</script>
