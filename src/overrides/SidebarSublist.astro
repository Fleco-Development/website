---
import Badge from "@astrojs/starlight/components/Badge.astro";
import type { Badge as BadgeType } from "../utils/badge";

interface Link {
	type: "link";
	label: string;
	href: string;
	isCurrent: boolean;
	badge: BadgeType | undefined;
	attrs: any;
}

interface Group {
	type: "group";
	label: string;
	entries: (Link | Group)[];
	collapsed: boolean;
}

type SidebarEntry = Link | Group;

function flattenSidebar(sidebar: SidebarEntry[]): Link[] {
	return sidebar.flatMap((entry) =>
		entry.type === "group" ? flattenSidebar(entry.entries) : entry,
	);
}

interface Props {
	sublist: SidebarEntry[];
	nested?: boolean;
}
---

<ul
	class:list={{ "top-level": !Astro.props.nested }}
	class="!tw-daisy-menu tw-gap-2"
>
	{
		Astro.props.sublist.map((entry) => (
			<li>
				{entry.type === "link" ? (
					<a
						href={entry.href}
						aria-current={entry.isCurrent && "page"}
						class:list={[
							{
								large: !Astro.props.nested,
								current_page: entry.isCurrent,
								"tw-text-white": !entry.isCurrent,
								"tw-font-bold": entry.isCurrent,
							},
							entry.attrs.class,
							"tw-no-underline",
						]}
						{...entry.attrs}
					>
						<div class="tw-flex tw-flex-wrap tw-gap-1">
							<span>{entry.label}</span>
							{entry.badge && (
								<>
									<Badge
										text={entry.badge.text}
										variant={
											entry.isCurrent
												? "outline"
												: entry.badge.variant
										}
									/>
								</>
							)}
						</div>
					</a>
				) : (
					<details
						open={
							flattenSidebar(entry.entries).some(
								(i) => i.isCurrent,
							) || !entry.collapsed
						}
					>
						<summary>
							<span class="tw-text-md tw-font-bold">
								{entry.label}
							</span>
						</summary>
						<Astro.self sublist={entry.entries} nested />
					</details>
				)}
			</li>
		))
	}
</ul>

<style>
	.current_page {
		color: var(--sl-color-text-invert);
		background-color: var(--sl-color-text-accent);
	}
</style>
