---
import { marked } from 'marked';
interface Props {
	headers: string[];
	rows: string[][];
}

const { headers, rows } = Astro.props;

const renderer = new marked.Renderer();

renderer.link = function (href, title, text) {
	if (href.startsWith('blank_')) {
		const actualUrl = href.substring(6, href.length);

		return `<a href="${actualUrl}" title="${title || ''}" target="_blank">${text}</a>`;
	} else {
		return `<a href="${href}" title="${title || ''}">${text}</a>`;
	}
};

marked.use({ renderer });
---

<div class="tw-overflow-x-auto">
	<div
		class="xl:rw-min-w-0 tw-flex tw-min-w-max tw-flex-shrink-0 tw-flex-col tw-rounded-lg tw-border tw-border-gray-700 tw-p-4"
	>
		<div
			class="tw-flex tw-flex-shrink-0 tw-overflow-x-auto tw-rounded-lg tw-bg-gray-800 tw-p-2 tw-text-center tw-font-bold"
		>
			{headers.map((header) => <span class="table-header tw-flex-1 tw-p-2">{header}</span>)}
		</div>

		{
			rows.map((row, index) => {
				const isLast = index === rows.length - 1;

				return (
					<>
						<div class="tw-flex tw-min-w-max tw-items-center tw-p-2 tw-text-center">
							{row.map((entry) => (
								<span class="tw-flex-1 tw-p-2" set:html={marked.parseInline(entry)} />
							))}
						</div>
						{!isLast && <span class="tw-daisy-divider" />}
					</>
				);
			})
		}
	</div>
</div>

<style>
	:root[data-theme='light'] .table-header {
		@apply tw-text-white;
	}

	:root[data-theme='dark'] .table-header {
		@apply tw-text-slate-400;
	}
</style>
